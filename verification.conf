;;;;;;;;;;;;;;;;;;;;;;;; NPSTN Verification Subroutines ;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;; NOTICE: Do not make modifications to this file! ;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;; QUESTIONS: Direct to NPSTN Business Office ;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;; USAGE: Including this in your dialplan alone will NOT help you! ;;;;;;
;;;;;;;;;; You must LEVERAGE the tools below if they are to be useful! ;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;; *** PART A: INBOUND *** ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; [from-npstn] (and from-cnet, etc.) should make use of INCOMING verification ;
;;; The FIRST THING that should happen on ANY incoming call is a call to the ;;;;
;;; proper incoming verification subroutine, e.g. npstn-verify, etc. ;;;;;;;;;;;;
;[from-npstn] ; Incoming calls from NPSTN ; *** SAMPLE [from-npstn] context *** ;
;exten => _X!,1,GoSub(npstn-verify,${EXTEN},1)
;	same => n,GotoIf($["${clidverif}"="11"]?:accept)
;	same => n,GotoIf($[${GROUP_COUNT(npstnspam@cvs)}<5]?:reject)
;	same => n(accept),GoTo(external-users,${EXTEN},1)
;	same => n(reject),Hangup()

;;;;;;;;;;;;;;;;;;;;;;;;;;; *** PART B: OUTBOUND *** ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; [dtnpstn] should look like this, to make use of OUTGOING verification SRs ;;;
;[dtnpstn] ; NPSTN 20190215 NA ; *** SAMPLE [dtnpstn] context *** ;;;;;;;;;;;;;;;
;exten => _X!,1,Set(originalclid=${CALLERID(all)})
;	same => n,GoSub(npstn-out-verify,${EXTEN},1)
;	same => n,GotoIf($["${GOSUB_RETVAL}"="0"]?npstn-out-blocked,s,1)
;	same => n,GoSub(dialnpstn,start,1(${EXTEN},disable,${zipcode},${maindisa}))
;	same => n,Set(CALLERID(all)=${originalclid})
;	same => n,Hangup()

;;;;;;;;;;;;;;;;;;;;;;;;;;; *** Verification SRs *** ;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; CNAM Subroutines
[disa-rewrite-cnam] ; NPSTN 20190216 NA ; rewrites CNAM if not already tagged
exten => s,1,Set(pstn=" pstn")
	same => n,Set(disa="disa")
	same => n,Set(gw="gateway")
	same => n,Set(via="via npstn")
	same => n,Set(lowered=${TOLOWER("${CALLERID(name)}")})
	same => n,GoSub(cnamsearch,s,1(${lowered},${pstn}))
	same => n,Set(found=${GOSUB_RETVAL})
	same => n,GotoIf($[${found}=1]?norewritepstn)
	same => n,GoSub(cnamsearch,s,1(${lowered},${disa}))
	same => n,Set(found=${GOSUB_RETVAL})
	same => n,GotoIf($[${found}=1]?norewritedisa)
	same => n,GoSub(cnamsearch,s,1(${lowered},${gw}))
	same => n,Set(found=${GOSUB_RETVAL})
	same => n,GotoIf($[${found}=1]?norewritedisa)
	same => n,GoSub(cnamsearch,s,1(${lowered},${via}))
	same => n,Set(found=${GOSUB_RETVAL})
	same => n,GotoIf($[${found}=1]?norewritedisa)
	same => n(rewrite),Set(CALLERID(name)=${CALLERID(name)} via ${clli} DISA)
	same => n,Return(0) ;;;;;;;;;;;;;;;;;;;; Return NONE code to [npstn-out-verify]
	same => n(norewritedisa),Return(1) ;;;;; Return DISA code to [npstn-out-verify]
	same => n(norewritepstn),Return(2) ;;;;; Return PSTN code to [npstn-out-verify]

[cnamsearch] ; NPSTN 20190216 NA ; loops through ARG1 checking for ARG2 to appear in sequence
exten => s,1,Set(base=${ARG1}) ; base = variable being searched
	same => n,Set(str=${ARG2}) ; str = variable for which to search
	same => n,Set(base=${FILTER(A-Za-z\x20,${base})})
	same => n,Set(str=${FILTER(A-Za-z\x20,${str})})
	;same => n,NoOp(Comparing word "${base}" with "${str}")
	same => n,Set(chars=${LEN(${base})})
	same => n,Set(reqch=${LEN(${str})})
	same => n,Set(match=0)
	same => n,Set(a=0)
	same => n,While($[${a}<${reqch}]) ; for each character in ARG2, check if a character in ARG1 matches it
		same => n,Set(b=0)
		same => n,While($[${b}<${chars}]) ; for each character 
			;same => n,NoOp(Does "${base:${b}:1}" match "${str:${a}:1}"?)
			same => n,GotoIf($["${str:${a}:1}"="${base:${b}:1}"]?:nextb) ; if no match, don't check for 2-in-a-row match
			same => n,Set(c=0)
			same => n,Set(matchedchars=0)
			same => n,While($[${c}<${reqch}]) ; if match, check for all subsequent LEN(ARG2) chars. to match
				;same => n,NoOp(PosMatch: Does "${base:$[${c}+${b}]:1}" match "${str:${c}:1}"?)
				same => n,GotoIf($["${base:$[${c}+${b}]:1}"="${str:${c}:1}"]?:nextc)
				same => n,Set(matchedchars=$[${matchedchars}+1])
				same => n,GotoIf($["${matchedchars}"="${reqch}"]?success:nextc) ; have all LEN(ARG2) chars. been iterated through?
				same => n(success),Set(match=1) ; complete match found
				same => n(nextc),Set(c=$[${c}+1])
			same => n,EndWhile()
			same => n(nextb),Set(b=$[${b}+1])
		same => n,EndWhile()
		same => n,Set(a=$[${a}+1])
	same => n,EndWhile()
same => n,Return(${match})

;;; Outgoing verification
[npstn-out-verify] ; NPSTN 20190212 NA ; set IAX flags and modifies CNAM if necessary
exten => s,1,GoTo(00,1)
exten => _X!,1,GotoIf($["${clidverif}"=""]?done)
	same => n(setflags),GoSub(npstn-set-flags,s,1)
	same => n,GoSub(disa-rewrite-cnam,s,1)
	same => n(done),GoSub(npstn-out-allow,s,1(${GOSUB_RETVAL}))
	same => n,Return(${GOSUB_RETVAL}) ; Return 1 to complete outgoing call, 0 to divert to intercept

[npstn-set-flags]
exten => s,1,Set(IAXVAR(clidverif)=${clidverif})
	same => n,Set(IAXVAR(DISAVIA)=${maindisa}) ; Lets other nodes know where this call came from so they can verify this NPSTN node
	same => n,Return()

[npstn-out-allow] ; NPSTN 20190215 NA ; determine whether outgoing call should be allowed to complete
exten => s,1,Set(cnamcode=${ARG1}) ; 0=CNAM just modified,1=CNAM received tagged as via DISA,2=CNAM received tagged as via PSTN
	same => n,GotoIf($["${cnamcode}"="1"]?disa)
	same => n,GotoIf($["${cnamcode}"=2"]?disa)
	same => n,Return(1) ; if cnamcode=0 (CNAM just modified), allow outgoing call to complete regardless
	same => n(disa),GotoIf($["${allowdisathru}"="NO"]?term) ; allowdisathru global var. must be set to YES/NO per NPSTN Docs
	same => n,Return(1) ; if cnamcode=1 (CNAM received as via DISA), allow outgoing call if global var. allowdisathru=YES
	same => n(pstn),GotoIf($["${allowpstnthru}"="NO"]?term) ; allowpstnthru global var. must be set to YES/NO per NPSTN Docs
	same => n(term),Return(0) ; call should not be allowed to leave this switch

[npstn-out-blocked] ; NPSTN 20190215 NA ; destination for calls that are not allowed to leave this node
exten => s,1,Answer()
	same => n,Wait(0.7)
	same => n,PlayTones(2600)
	same => n,Wait(0.3)
	same => n,GoTo(invalidincoming,s,1)

[lookupchan] ; NPSTN 20190316 NA ; analyzes lookup request and returns 0 if it is not a supported channel
exten => s,1,Set(lookup=${ARG1}) ; allowed channel technologies are IAX, SIP, MGCP, and H323
	same => n,NoOp(${TOUPPER(${lookup:0:3})})
	same => n,GotoIf($["${TOUPPER(${lookup:0:3})}"="SIP"]?sip) ; don't further check the destination if it's SIP
	same => n,Set(regres=${REGEX("^[iI][aA][xX]2/[a-zA-Z0-9_\-]+@([a-zA-Z0-9_\-]+\.)+[a-zA-Z0-9_\-]+/[0-9]+$" ${lookup})})
	same => n,GotoIf($[${regres}=1]?:bad) ; above ensures there is at least 1 "." in the host (that it isn't a reference to a local peer with username/password)
	same => n,GotoIf($["${TOUPPER(${lookup:0:4})}"="IAX2"]?iax)
	same => n,GotoIf($["${TOUPPER(${lookup:0:4})}"="MGCP"]?mgcp)
	same => n,GotoIf($["${TOUPPER(${lookup:0:4})}"="H323"]?h323)
	same => n(bad),Return(0)
	same => n(iax),Return(1)
	same => n(sip),Return(2)
	same => n(mgcp),Return(3)
	same => n(h323),Return(4)

;;; Incoming verification
[pstn-us-verify] ; NPSTN 20190212 NA ; to be called immediately on any incoming call from a US PSTN DID
exten => s,1,Set(CALLERID(num)=${FILTER(0-9A-Za-z,${CALLERID(num)})})
	same => n,GoSub(anonymous-check,s,1)
	same => n,Set(anon=${GOSUB_RETVAL})
	same => n,GotoIf($[${anon}=0]?anonymous:checklen)
	same => n(checklen),GotoIf($[${LEN(${CALLERID(num)})}<10]?invalid)
	same => n,Set(cnum=${CALLERID(num):-10:10})
	same => n,GotoIf($[${cnum:0:1}=0]?invalid)
	same => n,GotoIf($[${cnum:0:1}=1]?invalid)
	same => n,GotoIf($[${cnum:3:1}=0]?invalid)
	same => n(valid),Set(__clidverif=30)
	same => n,GoTo(done)
	same => n(invalid),Set(__clidverif=31)
	same => n,GoTo(done)
	same => n(anonymous),Set(__clidverif=32)
	same => n,GoTo(done)
	same => n(done),Set(CALLERID(name)=${CALLERID(name)} via ${clli} US PSTN)
	same => n,Return()

[pstn-uk-verify] ; NPSTN 20190212 NA ; to be called immediately on any incoming call from a UK PSTN DID
exten => s,1,Set(CALLERID(num)=${FILTER(0-9A-Za-z,${CALLERID(num)})})
	same => n,GoSub(anonymous-check,s,1)
	same => n,Set(anon=${GOSUB_RETVAL})
	same => n,GotoIf($[${anon}=0]?anonymous:checklen)
	same => n(checklen),GotoIf($[${LEN(${CALLERID(num)})}<8]?invalid) ; minimum acceptable UK CLID length assumed to be 8
	same => n(valid),Set(__clidverif=40)
	same => n,GoTo(done)
	same => n(invalid),Set(__clidverif=41)
	same => n,GoTo(done)
	same => n(anonymous),Set(__clidverif=42)
	same => n,GoTo(done)
	same => n(done),Set(CALLERID(name)=${CALLERID(name)} via ${clli} UK PSTN)
	same => n,Return()

[pstn-au-verify] ; NPSTN 20200122 NA ; to be called immediately on any incoming call from a AU PSTN DID
exten => s,1,Set(CALLERID(num)=${FILTER(0-9A-Za-z,${CALLERID(num)})})
	same => n,GoSub(anonymous-check,s,1)
	same => n,Set(anon=${GOSUB_RETVAL})
	same => n,GotoIf($[${anon}=0]?anonymous:checklen)
	same => n(checklen),GotoIf($[${LEN(${CALLERID(num)})}<10]?invalid) ; minimum acceptable AU CLID is 10
	same => n,GotoIf($["${CALLERID(num):-9:1}"="6"]?invalid) ; AU numbers don't start with 06 or 09 or 01
	same => n,GotoIf($["${CALLERID(num):-9:1}"="9"]?invalid)
	same => n,GotoIf($["${CALLERID(num):-9:1}"="1"]?invalid)
	same => n,GotoIf($["${CALLERID(num):-10:1}"="0"]?valid:invalid) ; AU numbers start with a 0 (10th last digit)
	same => n(valid),Set(__clidverif=50)
	same => n,GoTo(done)
	same => n(invalid),Set(__clidverif=51)
	same => n,GoTo(done)
	same => n(anonymous),Set(__clidverif=52)
	same => n,GoTo(done)
	same => n(done),Set(CALLERID(name)=${CALLERID(name)} via ${clli} AU PSTN)
	same => n,Return()

; NOTICE: IF USING THIS SUBROUTINE ANYWHERE!: you MUST define a global variable named npstncc which contains your 2-character country code!
[pstn-other-verify] ; NPSTN 20200122 NA ; to be called immediately on any incoming call from a PSTN DID outside the US, UK, or AU
exten => s,1,Set(CALLERID(num)=${FILTER(0-9A-Za-z,${CALLERID(num)})})
	same => n,GoSub(anonymous-check,s,1)
	same => n,Set(anon=${GOSUB_RETVAL})
	same => n,GotoIf($[${anon}=0]?anonymous:checklen)
	same => n(checklen),GotoIf($[${LEN(${CALLERID(num)})}<8]?invalid) ; minimum acceptable CLID length, in general, assumed to be 7
	same => n(valid),Set(__clidverif=60)
	same => n,GoTo(done)
	same => n(invalid),Set(__clidverif=61)
	same => n,GoTo(done)
	same => n(anonymous),Set(__clidverif=62)
	same => n,GoTo(done)
	same => n(done),Set(CALLERID(name)=${CALLERID(name)} via ${clli} ${npstncc} PSTN)
	same => n,Return()

[anonymous-check] ; NPSTN 20190212 NA ; returns 0 if the CLID or CNAM is likely private/anonymous/withheld/blocked/restricted/etc. ; otherwise returns 1
exten => s,1,Set(cnam=${CALLERID(name)})
	same => n,Set(cnum=${CALLERID(num)})
	same => n,GotoIf($["${TOLOWER(${cnam}):0:9}"="anonymous"]?anon)
	same => n,GotoIf($["${TOLOWER(${cnum}):0:9}"="anonymous"]?anon)
	same => n,GotoIf($["${TOLOWER(${cnam}):0:7}"="private"]?anon)
	same => n,GotoIf($["${TOLOWER(${cnum}):0:7}"="private"]?anon)
	same => n,GotoIf($["${TOLOWER(${cnam}):0:10}"="restricted"]?anon)
	same => n,GotoIf($["${TOLOWER(${cnum}):0:10}"="restricted"]?anon)
	same => n,GotoIf($["${TOLOWER(${cnam}):0:8}"="withheld"]?anon)
	same => n,GotoIf($["${TOLOWER(${cnum}):0:8}"="withheld"]?anon)
	same => n,GotoIf($["${TOLOWER(${cnam}):0:8}"="unknown"]?anon)
	same => n,GotoIf($["${TOLOWER(${cnum}):0:8}"="unknown"]?anon)
	same => n,Return(1)
	same => n(anon),Return(0)

[cnet-verify] ; NPSTN 20190212 NA ; to be called immediately on all [from-cnet] calls
exten => _X!,1,Set(CALLERID(num)=${FILTER(0-9A-Za-z,${CALLERID(num)})})
	;same => n,Set(clidverified=${IAXVAR(clidverif)})
	same => n,GoSub(cnet-verifyclid,${EXTEN},1) ; Will flag PSTN callers via another C*NET node's DISA as "21"
	same => n,Set(valid=${GOSUB_RETVAL})
	same => n,GotoIf($[${valid}=1]?valid:invalid)
	same => n(valid),Set(__clidverif=20)
	same => n,Return()
	same => n(invalid),Set(__clidverif=21)
	same => n,Return()

[cnet-verifyclid] ; NPSTN 20190218 NA
exten => _X!,1,Set(cnum=${CALLERID(num)})
	same => n(ewr),GoSub(cnet-reverse-iax,${EXTEN},1(${cnum}))
	same => n,Set(ARRAY(calleriax,cnumvalid)=${GOSUB_RETVAL})
	same => n,GotoIf($[${cnumvalid}=1]?:invalid)
	same => n,GotoIf($["${calleriax}"=""]?invalid)
	same => n,GoSub(isitip,${EXTEN},1(${calleriax}))
	same => n,Set(ARRAY(iaxisip,calleriplookup)=${GOSUB_RETVAL})
	same => n,GotoIf($[${iaxisip}=1]?getpeer)
	same => n,GoSub(fqdn2ip,${EXTEN},1(${calleriax}))
	same => n,Set(ARRAY(calleriaxip,calleriplookup)=${GOSUB_RETVAL})
	same => n(getpeer),GoSub(getpeerip,${EXTEN},1)
	same => n,Set(ipactual=${GOSUB_RETVAL})
	;same => n,GotoIf($[${ipactual}=1]?:invalid)
	same => n,GoSub(cnet-exceptions,${CALLERID(num)},1(${ipactual})) ;;;;;;;;;;;;;;
	same => n,Set(match=${GOSUB_RETVAL}) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	same => n,GoToIf($["${match}"="1"}]?done) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	same => n,GoSub(ipcomp,${EXTEN},1(${calleriplookup},${ipactual}))
	same => n,Set(match=${GOSUB_RETVAL})
	same => n(done),Return(${match})
	same => n(invalid),Return(0)

[cnet-exceptions]
exten => _1488XXXX,1,GoSub(ipcomp,${EXTEN},1(199.199.196.82,${ARG1}))
	same => n,Return(${GOSUB_RETVAL})
exten => _1596XXXX,1,GoSub(ipcomp,${EXTEN},1(45.32.212.173,${ARG1}))
	same => n,Return(${GOSUB_RETVAL})
include => noexception

[noexception]
exten => anonymous,1,Return(0)
exten => _[A-Za-z].,1,Return(0)
exten => _X!,1,Return(0)

[npstn-verify] ; NPSTN 20190212 NA ; to be called immediately on all [from-npstn] calls
exten => _X!,1,Set(CALLERID(num)=${FILTER(0-9A-Za-z,${CALLERID(num)})})
	same => n,Set(fromnum=${IAXVAR(DISAVIA)})
	same => n,Set(clidverified=${IAXVAR(clidverif)})
	same => n,GotoIf($[${LEN(${clidverified})}=2]?verifynode) ; Should the node reporting the caller's verification status be trusted? (Confirm it's a valid NPSTN node telling us, not a rogue server)
	same => n,GoSub(npstn-verifyclid,${EXTEN},1)	; Allows callers dialing through DISAs to still maintain verification status
	same => n,Set(valid=${GOSUB_RETVAL})			; Now, not just any server can set IAXVAR(clidverif) to spoof verification status (only a valid NPSTN node could do this)
	same => n,GotoIf($[${valid}=1]?valid:invalid)
	same => n(verifynode),GoSub(npstn-verifyclidother,${EXTEN},1(${fromnum})) ; Verify the NPSTN node through which the NPSTN call is passing
	same => n,Set(valid=${GOSUB_RETVAL})
	same => n,GotoIf($[${valid}=1]?judgedvalid:judgedinvalid)
	same => n(valid),Set(__clidverif=10)
	same => n,Return()
	same => n(invalid),Set(__clidverif=11)
	same => n,Set(GROUP(cvs)=npstnspam)
	same => n,Return()
	same => n(judgedvalid),Set(__clidverif=${clidverified})
	same => n,Return()
	same => n(judgedinvalid),Set(__clidverif=19)
	same => n,Return()

[npstn-verifyclid] ; NPSTN 20190212 NA
exten => _X!,1,Set(cnum=${CALLERID(num)})
	same => n,GoSub(npstn-reverse-iax,${EXTEN},1(${cnum}))
	same => n,Set(ARRAY(calleriax,cnumvalid)=${GOSUB_RETVAL})
	same => n,GotoIf($[${cnumvalid}=1]?:invalid)
	same => n,GotoIf($["${calleriax}"=""]?invalid)
	same => n,GoSub(isitip,${EXTEN},1(${calleriax}))
	same => n,Set(ARRAY(iaxisip,calleriplookup)=${GOSUB_RETVAL})
	same => n,GotoIf($[${iaxisip}=1]?getpeer)
	same => n,GoSub(fqdn2ip,${EXTEN},1(${calleriax}))
	same => n,Set(ARRAY(calleriaxip,calleriplookup)=${GOSUB_RETVAL})
	same => n(getpeer),GoSub(getpeerip,${EXTEN},1)
	same => n,Set(ipactual=${GOSUB_RETVAL})
	;same => n,GotoIf($[${ipactual}=1]?:invalid)
	same => n,GoSub(ipcomp,${EXTEN},1(${calleriplookup},${ipactual}))
	same => n,Set(match=${GOSUB_RETVAL})
	same => n,GotoIf($[${match}=1]?valid:invalid)
	same => n(invalid),Return(0)
	same => n(valid),Return(1)

[npstn-verifyclidother] ; NPSTN 20190212 NA
exten => _X!,1,Set(cnum=${ARG1})
	same => n(ewr),GoSub(npstn-reverse-iax,${EXTEN},1(${cnum}))
	same => n,Set(ARRAY(disafromiax,cnumvalid)=${GOSUB_RETVAL})
	same => n,GotoIf($[${cnumvalid}=0]?invalid)
	same => n,GoSub(isitip,${EXTEN},1(${disafromiax}))
	same => n,Set(ARRAY(iaxisip,disafromiplookup)=${GOSUB_RETVAL})
	same => n,GotoIf($[${iaxisip}=1]?getpeer)
	same => n,GoSub(fqdn2ip,${EXTEN},1(${disafromiax}))
	same => n,Set(ARRAY(disafromiaxip,disafromiplookup)=${GOSUB_RETVAL})
	same => n(getpeer),GoSub(getpeerip,${EXTEN},1)
	same => n,Set(ipactual=${GOSUB_RETVAL})
	same => n,GotoIf($[${ipactual}=0]?invalid)
	same => n,GoSub(ipcomp,${EXTEN},1(${disafromiplookup},${ipactual}))
	same => n,Set(match=${GOSUB_RETVAL})
	same => n,GotoIf($[${match}=0]?invalid)
	same => n,Return(1)
	same => n(invalid),Return(0)

[cktslookup] ; NPSTN 20190218 NA ; ARG1 = full international number to lookup on C*NET
exten => s,1,Set(ENUM=${ENUMLOOKUP(+${ARG1},ALL,,1,std.ckts.info)})
	same => n,GotoIf($[${LEN(${ENUM})}=0]?fail)
	same => n,GotoIf($[${ENUM:0:3}=iax]?iax)
	same => n,GotoIf($[${ENUM:0:3}=sip]?sip)
	same => n,GotoIf($[${ENUM:0:3}=h32]?h323)
	same => n(iax),Set(DIALSTR=IAX2/${ENUM:5})
	same => n,GoTo(done)
	same => n(sip),Set(DIALSTR=SIP/${ENUM:4})
	same => n,GoTo(done)
	same => n(h323),Set(DIALSTR=H323/${ENUM:5})
	same => n(done),Return(${DIALSTR})
	same => n(fail),Return(${ENUM})

[cnet-reverse-iax] ; NPSTN 20190212 NA ; based on npstn-ewr-fetch
exten => _X!,1,Set(nocid=CNET_NUMBER_NOT_VALID)})
	same => n,Set(badcid=)})
	same => n,GoSub(cktslookup,s,1(${ARG1}))
	same => n,Set(rtcr=${GOSUB_RETVAL})
	same => n,Set(cv=${IF($[$["${rtcr}"="${nocid}"]|$["${rtcr}"="${badcid}"]]?0:1)})
	same => n,Return(${rtcr},${cv})

[npstn-reverse-iax] ; NPSTN 20190212 NA ; based on npstn-ewr-fetch
exten => _X!,1,Set(nocid=${SHELL(curl "https://npstn.us/api/v1/?lookup=")})
	same => n,Set(badcid=${SHELL(curl "https://npstn.us/api/v1/?lookup=442072221234")})
	same => n,Set(rtcr=${SHELL(curl "https://npstn.us/api/v1/?lookup=${ARG1}")})
	same => n,Set(cv=${IF($[$["${rtcr}"="${nocid}"]|$["${rtcr}"="${badcid}"]]?0:1)})
	same => n,Return(${rtcr},${cv})

[isitip]    ;20181116 BJC - ARG1 is a iaxuri - if ARG1 contains an IP address, returns dnf=1 otherwise dnf=0  
exten => _X!,1,Set(oc1=${ISNULL(${FILTER(0-9,${CUT(CUT(CUT(ARG1,/,2),@,2),.,1)})})})    ;slice iaxuri and evaluate octet1
	same => n,Set(oc2=${ISNULL(${FILTER(0-9,${CUT(CUT(CUT(ARG1,/,2),@,2),.,2)})})})            ;slice iaxuri and evaluate octet2
	same => n,Set(oc3=${ISNULL(${FILTER(0-9,${CUT(CUT(CUT(ARG1,/,2),@,2),.,3)})})})            ;slice iaxuri and evaluate octet3
	same => n,Set(oc4=${ISNULL(${FILTER(0-9,${CUT(CUT(CUT(ARG1,/,2),@,2),.,4)})})})            ;slice iaxuri and evaluate octet4
	same => n,Set(dnf=${IF($[${oc1}|${oc2}|${oc3}|${oc4}]=0?0:1)})                            ;OR sum octets
	same => n,Set(ip=${IF($["${dnf}"="1"]?${CUT(CUT(ARG1,@,2),/,1)}:0)})                    ;IP address
	same => n,Return(${dnf},${ip})                                                            ;return IP flag & IP  

[fqdn2ip]    ;20181114 BJC - ARG1 is iaxuri containing an fqdn, returns iaxuri containing ip address and ip address if host exists else returns Unknown Host and fqdn
exten => _X!,1,Set(ARRAY(ds1,ds2,ds3)=${CUT(ARG1,@,1)},${CUT(CUT(ARG1,@,2),/,1)},${CUT(CUT(ARG1,@,2),/,2)})        ;extract fqdn to {DS2}
	same => n,Set(ds2=${FILTER(0-9.,${SHELL(dig ${ds2} +noall +short | sed -n '$'p)})})                                ;convert fqdn to IP
	same => n,GotoIf($["${ds2}"=""]?nn)                                                                                ;unknown host?
	same => n,Return(${ds1}@${ds2}/${ds3},${ds2})                                                                    ;return converted iaxuri & IP address
	same => n(nn),Return(Unknown Host,${ds2})                                                                        ;Unknown Host - no IP address

[getpeerip]    ;20181114 BJC / 20190223 NA - returns peerip for IAX2/SIP/H323/MGCP channel or 0 for all other channel technologies
exten => _X!,1,Set(ct=${CHANNEL(channeltype)})            ;get technology
	same => n,GotoIf($["${ct}"="IAX2"]?setpip)            ;incoming NPSTN calls are IAX2 or one of the other 3 technologies, any other technology must be local/test channels
	same => n,GotoIf($["${ct}"="SIP"]?setpip)
	same => n,GotoIf($["${ct}"="H323"]?setpip)
	same => n,GotoIf($["${ct}"="MGCP"]?setpip)
	same => n,GoTo(z)
	same => n(setpip),Set(pip=${CHANNEL(peerip)})                    ;get peer IP
	same => n,Return(${pip})                                ;return peer IP
	same => n(z),Return(0)                                    ;return 0 for local channels

[ipcomp]    ;20181114 BJC - ARG1 and ARG2 are IP addresses - returns cpf=1 if ARG1 & ARG2 coincidence otherwise cpf=0
exten => _X!,1,Set(cpf=${IF($[${FILTER(0-9,${ARG1})}=${FILTER(0-9,${ARG2})}]?1:0)})    ;compare ip addresses
	same => n,Return(${cpf})                                                           ;return compare flag

;;;;;;;;;;;;;;;;;;; UNUSED (INCLUDED FOR REFERENCE ONLY) ;;;;;;;;;;;;;;;;;;;;;;;
[npstn-ewr-fetch]    ;20181114 BJC - ARG1 is ${CALLERID(num)}, ARG2 is ${EXTEN} - returns caller and callee iaxuris and caller validity, "ewr"=each way route
exten => _X!,1,Set(nocid=${CURL(https://npstn.us/api/v1/?lookup=)})    ;Get fault code for ""<>                                    
	same => n,Set(badcid=${CURL(https://npstn.us/api/v1/?lookup=442072221234)})    ;Get fault code    for non-NPSTN extension
	same => n,Set(rtcr=${CURL(https://npstn.us/api/v1/?lookup=${ARG1})})    ;Get route to caller   ;store caller iaxuri
	same => n,Set(rtce=${CURL(https://npstn.us/api/v1/?lookup=${ARG2})})     ;Get route to callee   ;store callee iaxuri
	same => n,Set(cv=${IF($[$["${rtcr}"="${nocid}"]|$["${rtcr}"="${badcid}"]]?1:0)})    ;check for valid NPSTN CID
	same => n,Return(${rtcr},${rtce},${cv})                                                                            ;return variables

[cidcheck]    ;20181211 BJC ARG1=CALLERID(name) ARG2=CALLERID(num) Returns 1 for acceptable CALLERID, 0 otherwise
exten => _X!,1,Set(ARRAY(PCNA,PCNU,ANON,ASTK,ITNL,WHLD)="${ARG1}","${FILTER(0-9,${ARG2})}","anonymous","asterisk","international","withheld")    ; populate variables
	same => n,GotoIf($[$["${TOLOWER(${PCNA})}"="${ANON}"]|["${TOLOWER(${PCNA})}"="${ASTK}"]|["${TOLOWER(${PCNA})}"=""]]?rj)             ; 1st cid check-CNAM
	same => n,GotoIf($[$["${TOLOWER(${PCNA})}"="${ITNL}"]|["${TOLOWER(${PCNA})}"="${WHLD}"]|["${TOLOWER(${PCNA})}"=""]]?rj)             ; 1st cid check-CNAM
	same => n,GotoIf($[$["${TOLOWER(${PCNU})}"="${ANON}"]|["${TOLOWER(${PCNU})}"="${ASTK}"]|["${TOLOWER(${PCNU})}"=""]]?rj)                ; 1st cid check-CNUM
	same => n,GotoIf($[$["${TOLOWER(${PCNU})}"="${ITNL}"]|["${TOLOWER(${PCNU})}"="${WHLD}"]|["${TOLOWER(${PCNU})}"=""]]?rj)             ; 1st cid check-CNUM
	same => n,Return(1)                                                                ; Accept cid
	same => n(rj),Return(0)                                                            ; Reject cid