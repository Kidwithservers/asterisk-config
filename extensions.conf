#include verification.conf ; this includes /etc/asterisk/verification.conf in the main Asterisk dialplan (loaded via extensions.conf)

[globals]
; "Core" variables that MUST be defined on ALL NPSTN nodes
clli=NPSTNNYOC1 ; the unique CLLI of your node
zipcode=12553 ; your ZIP code (00000 for nodes outside the U.S.A.)
maindisa=3931111 ; number to your primary DISA (if you don't have one, then any number that comes into your switch from NPSTN)
allowdisathru=YES ; See npstn.us/docs/ to learn more about what this variable does
allowpstnthru=NO ; See npstn.us/docs/ to learn more about what this variable does
npstnkey=h64dnpz1w8BMydZ1OclJ19xVnSPxlvQz ; your NPSTN UCP auth key (dial the business office at 116 or (407) 564-4141 if you need one)

;sound files locations
dialtone=custom/signal/dialtone
busy=custom/signal/busy
reorder=custom/signal/reorder
ccad=custom/signal/ccad
acbn=custom/signal/acbn
DTXB=city/xb_dialtone

; Number range assignments assignments
OC1=393 ; your office code's NNX

;MFing vars
MFX = "!0/500" ; silence
MF1 = "!700+900/50|!0/50"
MF2 = "!700+1100/50|!0/50"
MF3 = "!900+1100/50|!0/50"
MF4 = "!700+1300/50|!0/50"
MF5 = "!900+1300/50|!0/50"
MF6 = "!1100+1300/50|!0/50"
MF7 = "!700+1500/50|!0/50"
MF8 = "!900+1500/50|!0/50"
MF9 = "!1100+1500/50|!0/50"
MF0 = "!1300+1500/50|!0/50"
MFKP = "!1100+1700/100|!0/50"
MFST = "!1500+1700/35|!0/50"
DIGITSEP = "|"

;SFing vars
SFINTER=200
SFX = "!0/200" ; interdigit silence
SFPULSE=100
SFHZ=2600
SFP=60
SFB=40
SF1 = "!${SFHZ}/${SFP}|!0/${SFB}"
SF2 = "!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}"
SF3 = "!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}"
SF4 = "!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}"
SF5 = "!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}"
SF6 = "!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}"
SF7 = "!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}"
SF8 = "!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}"
SF9 = "!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}"
SF0 = "!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}|!${SFHZ}/${SFP}|!0/${SFB}"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Start Of main local Context ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[local]
exten => ${OC1}1111,1,GoTo(dt,DTXB,1) ;DISA
exten => voicemail,1,VoiceMail(${EXTEN}@local)
exten => 1197,1,VoiceMailMain(s${CALLERID(num)}@local)
exten => *97,1,VoiceMailMain(s${CALLERID(num)}@local)

;;;;;;;;;;;;;;;;;;;;;;
; Test Number Access ;
;;;;;;;;;;;;;;;;;;;;;;

exten => ${OC1}9901,1,Progress() "Switch verification"
	same => n,SayAlpha(${clli}) ;
	same => n,Hangup()

exten => ${OC1}9931,1,GoSub(echotest,s,1) ; Echo test

exten => ${OC1}9932,1,Answer() ; Calls that may last a while that won't get answered by a real person are best answered right away
	same => n,Wait(7200) ; Silent termination
	same => n,Hangup()

exten => ${OC1}9960,1,GoSub(mwtone,s,1) ; Milliwatt test tone
	same => n,Hangup()

exten => ${OC1}9970,1,GoSub(sounds,busy,1) ; Always busy
	same => n,Hangup()

exten => ${OC1}9971,1,GoSub(sounds,reorder,1) ; Always reorder
	same => n,Hangup()

exten => ${OC1}9990,1,Answer() ; Calls that may last a while that won't get answered by a real person are best answered right away
	same => n,Dial(Local/ring@ringout,,m(ringback)) ; Number that always rings "forever"

;;;;;;;;;;;;;;;;;;;;;
; SIP device dialer ;
;;;;;;;;;;;;;;;;;;;;;

exten => 3931213,1,Dial(IAX2/3931213,40)
        same => n,GotoIf($["${DIALSTATUS}"="CHANUNAVAIL"]?reorder,1)
        same => n,GotoIf($["${DIALSTATUS}"="BUSY"]?busy,1)
        same => n,GotoIf($["${DIALSTATUS}"="CONGESTION"]?reorder,1)
        same => n,GotoIf($["${DIALSTATUS}"="NOANSWER"]?voicemail,1)
        same => n,Return()


exten => _${OC1}1XXX,1,GoSub(SIPxNumToPeer,s,1(${EXTEN}))
	same => n,GoToIf($[${GOSUB_RETVAL}=000]?intercept:ata)
	same => n(ata),GoSub(ata,s,1(${GOSUB_RETVAL})) ; Dial SIP peer if it exists
	same => n,Hangup()
	same => n(intercept),GoSub(ccad,s,1) ; Intercept message if SIP peer does not exist
	same => n,Hangup()

exten => _${OC1}2XXX,1,GoSub(SIPxNumToPeer,s,1(${EXTEN}))
	same => n,GoToIf($[${GOSUB_RETVAL}=000]?intercept:ata)
	same => n(ata),GoSub(ata,s,1(${GOSUB_RETVAL})) ; Dial SIP peer if it exists
	same => n,Hangup()
	same => n(intercept),GoSub(ccad,s,1) ; Intercept message if SIP peer does not exist
	same => n,Hangup()

exten => _${OC1}9XXX,1,GoSub(SIPxNumToPeer,s,1(${EXTEN}))
	same => n,GoToIf($[${GOSUB_RETVAL}=000]?intercept:ata)
	same => n(ata),GoSub(ata,s,1(${GOSUB_RETVAL})) ; Dial SIP peer if it exists
	same => n,Hangup()
	same => n(intercept),GoSub(ccad,s,1) ; Intercept message if SIP peer does not exist
	same => n,Hangup()

exten => _NXXXXXXXXX,1,GoTo(dtpstn,${EXTEN},1)
exten => _1NXXXXXXXXX,1,GoTo(dtpstn,${EXTEN:-10},1)
exten => _9NXXXXXXXXX,1,GoTo(dtpstnbulkvs,${EXTEN:-10},1)
exten => _8NXXXXXXXXX,1,GoTo(dtpstnscammer,${EXTEN:-10},1)
exten => _NXXXXXX,1,GoTo(dtnpstn,${EXTEN},1)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; End Of main local Context ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[stevens]
exten => _1NXXXXXXXXX,1,Set(CALLERID(num)=+18455676651)
        same => n,Set(CALLERID(name)=Stevens Test)
	;same => n,GoTo(local,${OC1}9901,1)
        same => n,Dial(SIP/twilio/+${EXTEN},60)

exten => _NXXXXXXXXX,1,Set(CALLERID(num)=+18455676651)
        same => n,Set(CALLERID(name)=Stevens Test)
        ;same => n,GoTo(local,${OC1}9901,1)
        same => n,Dial(SIP/twilio/+1${EXTEN},60)

;;;;;;;;;;;;;;;;;;;;;;;;;
; Inbound Call Handlers ;
;;;;;;;;;;;;;;;;;;;;;;;;;

[from-npstn] ; Incoming calls from NPSTN
exten => s,1,GoSub(npstn-verify,${EXTEN},1)
	same => n,GotoIf($["${clidverif}"="11"]?:accept)
	same => n,GotoIf($[${GROUP_COUNT(npstnspam@cvs)}<5]?:reject)
	same => n(accept),GoTo(external-users,${EXTEN},1)
	same => n(reject),Hangup()

[outbound-fax]
exten => _XXXXXXXXXX,1,Set(FAXOPT(gateway)=yes)
	same => n,Set(CALLERID(num)=18454586370)
	same => n,Dial(SIP/bulkvsOut/1${EXTEN},60)

exten => _1XXXXXXXXXX,1,Set(FAXOPT(gateway)=yes)
	same => n,Set(CALLERID(num)=18454586370)
	same => n,Dial(SIP/bulkvsOut/${EXTEN},60)

[from-pstn]
exten => +18455676651,1,Set(CALLERID(number)=${CALLERID(number):-11})
	same => n,GoSub(spam-verify,s,1)
 	same => n,GoSub(cnamlookup,s,1)
	same => n,Dial(${DIALGROUP(realphones)},25)
	same => n,NoOp(go to voicemail)
	same => n,VoiceMail(3931571@local)

exten => 18454581049,1,GoSub(spam-verify,s,1)
	same => n,GoTo(dt,DTXB,1)

exten => 18454586370,1,Set(FAXOPT(gateway)=yes)
	same => n,Dial(SIP/3939570)

exten => 18452002004,1,Dial(IAX2/stevens/${EXTEN})
	same => n,Hangup()

exten => 18457139124,1,Dial(IAX2/stevens/${EXTEN})
        same => n,Hangup()

exten => 18452934262,1,Dial(IAX2/stevens/${EXTEN})
        same => n,Hangup()

exten => 18454201692,1,Dial(IAX2/stevens/${EXTEN})
        same => n,Hangup()

[external-users] ; External calls from various places (NPSTN, possibly C*NET, PSTN, and other networks, arrive here)
include => local ; Include the contents of the [local] context

[from-internal] ; Incoming calls from local SIP devices
exten => 8,1,GoTo(dt,DTXB,1)
exten => _X!,1,Set(CHANNEL(hangup_handler_push)=npstnbilling,${EXTEN},1(${STRFTIME(${EPOCH},,%s)},${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)}))
same => n,GoTo(local,${exten},1)

[cnamlookup]
exten => s,1,GotoIf($[ ${DB_EXISTS(cnam/${CALLERID(num)})} = 0]?new,1)
	same => 2,Set(CALLERID(name)=${DB(cnam/${CALLERID(num)})})
	same => n,Return()

exten => new,1,Set(DB(cnam/${CALLERID(num)})=${CURL(https://cnam.bulkCNAM.com/?id=5d238ff0b95299ea85be25d5242506fd&did=${CALLERID(num)})})
	same => n,GoTo(s,2)

[spam-verify]
; Screens for spam calls and deletes. Stores data in astdb with callerid as key
; Uses 0 for verified, and increases the value to 10, before blacklisting

exten => s,1,GotoIf($[ ${DB_EXISTS(verification/${CALLERID(num)})} = 0]?new,1)
	same => n,GoToIf($[ ${DB(verification/${CALLERID(num)})} > 10]?spam,1)
	same => n,GotoIf($[ ${DB(verification/${CALLERID(num)})} = 0]?:verify,1)
	same => n,Return()

exten => new,1,Set( DB(verification/${CALLERID(num)}) =1)
	same => n,GoTo(verify,1)

exten => verify,1,Progress()
	same => n,Read(dtmf,custom/screen_intro,1,,0,5)
	same => n,GotoIf($["${READSTATUS}" = "OK"]?:failed,1)
	same => n,Set(DB(verification/${CALLERID(num)})=0)
	same => n,Playback(beep, noanswer)
	same => n,Return()

exten => failed,1,Set(DB(verification/${CALLERID(num)})=DB(verification/${CALLERID(num)})+1)
	same => n,Playback(failed, noanswer)
	same => n,Hangup()

exten => spam,1,Playback(spam, noanswer)
	same => n,Hangup()

;;;;;;;;;;;;;;;;;;;;
; Utility Contexts ;
;;;;;;;;;;;;;;;;;;;;

[ata] ; Automatically dials the SIP peer by name (ARG1 = SIP peer name)
exten => s,1,GoSub(revertive,start,1(${EXTEN:-4},0,5xb))
	same => n,Dial(SIP/${ARG1},,m(ringback)g)
	same => n,GotoIf($["${DIALSTATUS}"="CHANUNAVAIL"]?reorder,1)
	same => n,GotoIf($["${DIALSTATUS}"="BUSY"]?busy,1)
	same => n,GotoIf($["${DIALSTATUS}"="CONGESTION"]?reorder,1)
	same => n,GotoIf($["${DIALSTATUS}"="NOANSWER"]?voicemail,1)
	same => n,Return()

[SIPxNumToPeer]
exten => s,1,Set(num=${ARG1})
	same => n,GotoIf($["${num}"=""]?dne)
	same => n,Set(scriptexists=${STAT(e,/etc/asterisk/scripts/sipcontext.sh)})
	same => n,GotoIf($["${scriptexists}"="1"]?use)
	same => n(download),System(wget https://phreaknet.org/npstn/code/sipcontext.sh -P /etc/asterisk/scripts/)
	same => n(perm),System(chmod 777 /etc/asterisk/scripts/sipcontext.sh)
	same => n(use),Set(peer=${SHELL(/etc/asterisk/scripts/sipcontext.sh "${num}")})
	same => n,GotoIf($["${peer}"=""]?dne)
	same => n,Return(${peer})
	same => n(dne),Return(000)

;;;;;;;;;;;;;;
; Test Lines ;
;;;;;;;;;;;;;;
[echotest] ; Echo test
exten => s,1,Answer()
	same => n,Echo()
	same => n,Hangup()

[mwtone] ; Milliwatt test tone
exten => s,1,Progress()
	same => n,SET(VOLUME(TX)=8)
	same => n,Wait(0.5)
	same => n,PlayTones(1004/1000)
	same => n,Wait(600)
	same => n,SET(VOLUME(TX)=1)
	same => n,Return

[ringout]
exten => ring,1,Wait(7200)
	same => n,Hangup()

;;;;;;;;;;;;;;;;;
; Sound Effects ;
;;;;;;;;;;;;;;;;;

[sounds]
exten => busy,1,Playback(${busy},noanswer)
	same => n,Return()

exten => reorder,1,Playback(${reorder},noanswer)
	same => n,Return()

exten => acbn,1,Playback(${acbn},noanswer)
	same => n,Return()

exten => ccad,1,Progress()
	same => n,Playback(custom/ccad,noanswer)
	same => n,Hangup()

[clunkcomplete]
exten => start,1,Playback(custom/clunk,noanswer)
	same => n,Return()

[mfer]
exten => start,1,Set(number=${ARG1}) ; ARG1 = digits to MF
	same => n,Set(c=0)
	same => n,Set(numdigits=${LEN(${ARG1})})
	same => n,Set(tonestring=${MFX}${DIGITSEP}${MFKP}${DIGITSEP})
	same => n,While($[${c}<${numdigits}])
	same => n,Set(MFnext=${MF${number:${c}:1}})
	same => n,Set(tonestring=${tonestring}${MFnext}${DIGITSEP})
	same => n,Set(c=${INC(c)})
	same => n,EndWhile
	same => n,Set(MFnext=${MFST})
	same => n,Set(tonestring=${tonestring}${MFnext}${DIGITSEP})
	same => n,Set(tonestring=${tonestring}${MFX})
	same => n,Set(toneduration=$[100*${LEN(${ARG1})}+1785])
	same => n,Playtones(${FILTER(0-9\x21/|+,${tonestring})})
	same => n,Wait($[${toneduration}/1000])
	same => n,StopPlaytones()
	same => n,Return

[revertive]
exten => start,1,Verbose(Revertive Pulse Generator: ${ARG1})
	same => n,AGI(pulsar.agi,${ARG1},${ARG2},${ARG3}) ; ARG2 can be set to 1 to indicate a "B-side" that adds 5 pulses to the second RP digit.
	same => n,Return() ; ARG1 should be a 4-digit extension and ARG3 must be one of the following: panel,1xb,5xb

[dialpulser]
exten => start,1,Set(number=${ARG1}) ; ARG1 = digits to dial pulse
	same => n,Set(c=0)
	same => n,Set(numdigits=${LEN(${ARG1})})
	same => n,While($[${c}<${numdigits}])
	same => n,Playback(custom/dialpulses/dp${number:${c}:1},noanswer)
	same => n,Set(c=${INC(c)})
	same => n,EndWhile
	same => n,Return

[sfer]
exten => start,1,Set(number=${ARG1}) ; ARG1 = digits to do something with
	same => n,Set(c=0)
	same => n,Set(p=0)
	same => n,Set(numdigits=${LEN(${ARG1})})
	same => n,Set(tonestring=)
	same => n,While($[${c}<${numdigits}])
	same => n,Set(p=$[${p}+${number:${c}:1}])
	same => n,Set(SFnext=${SF${number:${c}:1}})
	same => n,Set(tonestring=${tonestring}${SFnext}${DIGITSEP})
	same => n,Set(tonestring=${tonestring}${SFX}${DIGITSEP})
	same => n,Set(c=${INC(c)})
	same => n,EndWhile
	same => n,Set(toneduration=$[${SFPULSE}*${p}+${SFINTER}*${numdigits}])
	same => n,Playtones(${FILTER(0-9\x21/|+,${tonestring})})
	same => n,Wait($[${toneduration}/1000])
	same => n,StopPlaytones()
	same => n,Return

;;;;;;;;;;;;;;;;;;;;;;
; start of disa code ;
;;;;;;;;;;;;;;;;;;;;;;
[numclear]
exten => s,1,Return(,,,,,,,,,0,0)

[clanglookup] 
exten => DTXB,1,Return(dialclang1a,dialclang2a,dialclang3a,dialclang4a,dialclang5a,dialclang6a,dialclang7a,dialclang8a,dialclang9a,dialclang10a,dialclang11a)
exten => _DT.,1,GoTo(DTXB,1)

[dtlooplookup]
exten => _DT.,1,Return(0)

[dt]
exten => _DT.,1,Answer
	same => n,GoSub(clanglookup,${EXTEN},1)
	same => n,Set(ARRAY(clang1,clang2,clang3,clang4,clang5,clang6,clang7,clang8,clang9,clang10,clang11)=${GOSUB_RETVAL})
	same => n(begin),GoSub(numclear,s,1)
	same => n,Set(ARRAY(num,num1,num2,num3,num4,num5,num6,num7,num8,num9,num10,num11,digit,clangcount)=${GOSUB_RETVAL})
	; added veriable definiton to prevent a crash
	same => n,Set(digit=0)
	same => n,Set(clangcount=0)
	same => n(digit1),Set(digit=$[${digit}+1])
	same => n(read1),Set(TIMEOUT(response)=0)
	same => n,Read(num${digit},custom/switch/tones/dialtones/${$[${EXTEN}]},1)
	same => n,GoSub(dtlooplookup,${EXTEN},1)
	same => n,GotoIf($["${GOSUB_RETVAL}"="1"]?loopyes:loopno)
	same => n(loopyes),GotoIf($["${$[num${digit}]}"=""]?read1:postloopcheck)
	same => n(loopno),GotoIf($["${$[num${digit}]}"=""]?dtroute,permsig,1)
	same => n(postloopcheck),GoTo(processdigit)
	same => n(nextdigit),Set(digit=$[${digit}+1])
	same => n,Set(clangcount=$[${clangcount}+1])
	same => n,Read(num${digit},custom/dialsounds/${$[clang${clangcount}]},1)
	same => n,GotoIf($["${$[num${digit}]}"=""]?dtroute,${num},1)
	same => n,GotoIf($["${LEN(${num})}"="11"]?dialclang8)
	same => n,GoTo(processdigit)
	same => n(dialclang8),Playback(custom/dialsounds/${clang8})
	same => n(processdigit),Set(num=${num}${$[num${digit}]})
	same => n,GoSub(dtcheck,${num},1)
	same => n,Set(ARRAY(lineaction,linereturn,lineclunk)=${GOSUB_RETVAL})
	same => n,GotoIf($[${lineaction}=TERMINATE]?terminate)
	same => n,GoTo(nextdigit)
	same => n(terminate),Set(TIMEOUT(response)=15)
	same => n,GotoIf($[${lineclunk}=no]?linereturn)
	same => n,GoSub(clunkcomplete,start,1)
	same => n(linereturn),GotoIf($[${linereturn}=yes]?dialyes)
	same => n(dialno),GoTo(dtroute,${num},1)
	same => n(dialyes),Set(ss=${STRFTIME(${EPOCH},,%s)})
	same => n,Set(tt=${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)})
	same => n,Set(__dtnum=${num})
	same => n,Set(__ticketed=0)
	same => n,Dial(Local/${num}@dtroute,${DTL1XB},g)
	same => n,GotoIf($["${DIALSTATUS}"="ANSWER"]?answered)
	same => n,Set(ss=)
	same => n(answered),GoSub(npstnbilling,${num},1(${ss},${tt}))
	same => n(postticket),Set(__ticketed=1)
	same => n,GoTo(begin)
exten => h,1,GotoIf($["${DIALSTATUS}"="ANSWER"]?:done)
	same => n,GotoIf($["${ticketed}"="0"]?:done)
	same => n,GoSub(npstnbilling,${dtnum},1(${ss},${tt}))
	same => n(done),Hangup()

[dtcheck]
exten => 0,1,Return(TERMINATE,yes,yes)
exten => 959,1,Return(TERMINATE,no,yes)
exten => _N11,1,Return(TERMINATE,yes,yes)
exten => 660,1,Return(TERMINATE,no,no)
exten => _95[89],1,Return(TERMINATE,yes,no)

exten => _1XXXXXXXXXX,1,GoToIf($["${clidverif}"=""]?2:3)
	same => 2,Return(TERMINATE,yes,yes)
	same => 3,GoSub(sounds,ccad,1)

exten => _XXXXXXXXXX,1,GoToIf($["${clidverif}"=""]?2:3)
	same => 2,Return(TERMINATE,yes,yes)
	same => 3,GoSub(sounds,ccad,1)

exten => _${OC1}XXXX,1,Return(TERMINATE,yes,yes)

exten => _1XXXXXXX,1,Return(TERMINATE,yes,yes)
exten => _11XX,1,Return(TERMINATE,yes,yes)
exten => _*XX,1,Return(TERMINATE,yes,yes)

include => dtcheckdef

[dtcheckdef]
exten => _X!,1,Return(n,n,n)

[dtroute]
exten => _X!,1,Log(NOTICE, Call from ${CALLERID(all)} to ${EXTEN} via ${clli} DISA)
	same => n,GoTo(dtdest,${EXTEN},1)
exten => permsig,1,Log(NOTICE, Call from ${CALLERID(all)} at "${CHANNEL(peerip)}" timed out to permanent signal)
	same => n,GoTo(dtdest,${EXTEN},1)

[dtdest]
exten => permsig,1,Playback(custom/permsig)
	same => n,Playback(custom/crybaby)
	same => n,Hangup

exten => _${OC1}XXXX,1,GoTo(local,${EXTEN},1)
exten => _11XX,1,GoTo(local,${EXTEN},1)
exten => _*XX,1,GoTo(local,${EXTEN},1)

exten => 0,1,GoTo(dtnpstn,${EXTEN},1)
exten => _N11,1,GoTo(dtnpstn,${EXTEN},1)
exten => 660,1,GoTo(dtnpstn,${EXTEN},1)
exten => _95[89],1,GoTo(dtnpstn,${EXTEN},1)
exten => _101XXXX,1,GoTo(dtnpstn,${EXTEN},1)
exten => _NXXXXXX,1,GoTo(dtnpstn,${EXTEN},1)
exten => _1XXXXXXX,1,GoTo(dtnpstn,${EXTEN},1)

exten => _1XXXXXXXXXX,1,GoTo(dtpstn,${EXTEN},1)
exten => _XXXXXXXXXX,1,GoTo(dtpstn,${EXTEN},1)

;;;;;;;;;;;;;;;;;;;;
; Outbound Dialing ;
;;;;;;;;;;;;;;;;;;;;

[dtnpstn]
exten => _X!,1,Set(originalclid=${CALLERID(all)}) ; Any other calls should be sent "out" to NPSTN
	same => n,GoSub(npstn-out-verify,${EXTEN},1)
	same => n,GotoIf($["${GOSUB_RETVAL}"="0"]?npstn-out-blocked,s,1)
	same => n,ExecIf($[ ${RAND(1,100)} < 10]?GoSub(revertive,start,1(${EXTEN},0,5xb)):GoSub(mfer,start,1(${EXTEN}))
	;same => n,GoSub(dialpulser,start,1))
	same => n,GoSub(dialnpstn,start,1(${EXTEN},disable,${zipcode},${maindisa}))
	same => n,Set(CALLERID(all)=${originalclid})
	same => n,Hangup()

[dtpstn]
exten=> _x!,1,Progress()
	same => n,GoToIf($["${clidverif}"=""]?:reject,1)
	same => n,ExecIf($[ ${RAND(1,100)} < 10]?GoSub(revertive,start,1(${EXTEN},0,5xb)):GoSub(mfer,start,1(${EXTEN}))
	;same => n,GoSub(dialpulser,start,1(${EXTEN})))
	same => n,Set(CALLERID(num)=+18455676651)
	same => n,Set(CALLERID(name)=Kathryn Damato)
	;same => n,Dial(SIP/bulkvsOut/${EXTEN},60)
	same => n,Dial(SIP/twilio/+1${EXTEN},60)
exten => reject,1,GoSub(sounds,ccad,1)

[dtpstnbulkvs]
exten=> _x!,1,Progress()
	same => n,GoToIf($["${clidverif}"=""]?:reject,1)
	same => n,ExecIf($[ ${RAND(1,100)} < 10]?GoSub(revertive,start,1(${EXTEN},0,5xb)):GoSub(mfer,start,1(${EXTEN}))
	;same => n,GoSub(dialpulser,start,1(${EXTEN})))
	same => n,Set(CALLERID(num)=18454581049)
	same => n,Dial(SIP/bulkvsOut/1${EXTEN},60)
exten => reject,1,GoSub(sounds,ccad,1)

[dtpstnscammer]
exten=> _x!,1,Progress()
        same => n,GoToIf($["${clidverif}"=""]?:reject,1)
        same => n,ExecIf($[ ${RAND(1,100)} < 10]?GoSub(revertive,start,1(${EXTEN},0,5xb)):GoSub(mfer,start,1(${EXTEN}))
        ;same => n,GoSub(dialpulser,start,1(${EXTEN})))
        same => n,Set(CALLERID(num)=18452002004)
        same => n,Dial(SIP/bulkvsOut/1${EXTEN},60)
exten => reject,1,GoSub(sounds,ccad,1)

;;;;;;;;;;;;;;;;;;;;;;
; npstn network code ;
;;;;;;;;;;;;;;;;;;;;;;
[dialnpstn] ; NPSTN 20190215 NA ; Sends a call to NPSTN
exten => start,1,Set(num=${ARG1})
	same => n,GotoIf($[${LEN("${ARG4}")}>2]?clidoverride)
	same => n,Set(lookup=${SHELL(curl "https://crtc.npstn.us/api/v1/?lookup=${ARG1}&cid=${CALLERID(num)}&sntandem=${ARG2}&zipcode=${ARG3}")})
	same => n,GoTo(verify)
	same => n(clidoverride),Set(lookup=${SHELL(curl "https://crtc.npstn.us/api/v1/?lookup=${ARG1}&cid=${ARG4}&sntandem=${ARG2}&zipcode=${ARG3}")})
	same => n(verify),GoSub(lookupchan,s,1(${lookup})) ; verifies lookup for extra security
	same => n,GotoIf($["${GOSUB_RETVAL}"="0"]?npstn-BLOCKED,1)
	same => n,NoOp(NPSTN ROUTE TO: ${lookup})
	same => n,Dial(${lookup},,g)
	same => n,GoTo(npstn-${DIALSTATUS},1)
exten => npstn-ANSWER,1,Return()
exten => npstn-BUSY,1,GoSub(sounds,busy,1)
	same => n,Return()
exten => npstn-CONGESTION,1,GoSub(sounds,allcktsbusy,1)
	same => n,Return()
exten => npstn-CHANUNAVAIL,1,GoSub(sounds,reorder,1)
	same => n,Return()
exten => npstn-NOANSWER,1,GoSub(sounds,allcktsbusy,1)
	same => n,Return()
exten => npstn-BLOCKED,1,GoSub(sounds,ccad,1)
	same => n,Return()
exten => _npstn-.,1,Return()

[npstnbilling] ; NPSTN NA 20190504 NPSTN Toll Ticketing; EXTEN= number dialed, ARG1= start time of call in seconds, ARG2= datetime that the call started
exten => _X!,1,GoToIf($["${ARG1}"=""]?done)
	same => n,Set(endtime=${STRFTIME(${EPOCH},,%s)})
	same => n,Set(duration=$[${endtime} -${ARG1}]) ; can't use ${CDR(billsec)}
	same => n,GoToIf($["${ARG3}"=""]?:special)
	same => n,Set(type=direct)
	same => n,GoTo(request)
	same => n(special),Set(type=${ARG3})
	same => n(request),Set(request=${SHELL(curl "https://npstn.us/api/billing/?ani=${FILTER(0-9A-Za-z,${CALLERID(num)})}&callee=${FILTER(0-9,${EXTEN})}&type=${type}&duration=${duration}&key=${npstnkey}&clli=${clli}&year=${ARG2:0:4}&month=${ARG2:5:2}&day=${ARG2:8:2}&hr=${ARG2:11:2}&min=${ARG2:14:2}&sec=${ARG2:17:2}")})
	same => n(done),Set(__ticketed=1)
	same => n,Return()
